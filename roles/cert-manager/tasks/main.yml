- name: Add Jetstack Helm repository
  command: helm repo add jetstack https://charts.jetstack.io
  changed_when: false

- name: Update Helm repositories
  command: helm repo update
  changed_when: false

- name: Create cert-manager namespace
  command: kubectl create namespace cert-manager
  ignore_errors: yes

- name: Check if cert-manager is already installed
  command: helm list -n cert-manager -f cert-manager
  register: cert_manager_list_result
  changed_when: false

- name: Install or upgrade cert-manager
  command: >
    helm upgrade --install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --set installCRDs=true --wait
  register: install_result
  changed_when: "'STATUS: deployed' in install_result.stdout"

- name: Wait for cert-manager to be ready
  command: kubectl -n cert-manager get deployment cert-manager -o jsonpath='{.status.readyReplicas}'
  register: cert_manager_ready
  until: cert_manager_ready.stdout | int == 1
  retries: 30
  delay: 10
  changed_when: false

- name: Get Traefik LoadBalancer IP
  command: kubectl -n kube-system get svc traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
  register: traefik_ip_result
  changed_when: false

- name: Set Traefik IP fact
  set_fact:
    traefik_ip: "{{ traefik_ip_result.stdout }}"

- name: Create temporary file for ClusterIssuer
  tempfile:
    state: file
    suffix: clusterissuer.yaml
  register: temp_clusterissuer

- name: Write ClusterIssuer configuration to temporary file
  copy:
    content: |
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-prod
      spec:
        acme:
          server: https://acme-v02.api.letsencrypt.org/directory
          email: mo-abukar10@hotmail.com
          privateKeySecretRef:
            name: letsencrypt-prod
          solvers:
          - http01:
              ingress:
                class: traefik
    dest: "{{ temp_clusterissuer.path }}"

- name: Create ClusterIssuer for Let's Encrypt
  command: kubectl apply -f {{ temp_clusterissuer.path }}
  register: clusterissuer_result
  changed_when: "'created' in clusterissuer_result.stdout or 'configured' in clusterissuer_result.stdout"

- name: Remove temporary ClusterIssuer file
  file:
    path: "{{ temp_clusterissuer.path }}"
    state: absent

- name: Create temporary file for ArgoCD Ingress
  tempfile:
    state: file
    suffix: argocd_ingress.yaml
  register: temp_argocd_ingress

- name: Write ArgoCD Ingress configuration to temporary file
  copy:
    content: "apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: argocd-server-ingress\n  namespace: argocd\n  annotations:\n    kubernetes.io/ingress.class: traefik\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\n    traefik.ingress.kubernetes.io/router.tls: \"true\"\nspec:\n  tls:\n  - hosts:\n    - argocd.{{ traefik_ip }}.nip.io\n    secretName: argocd-secret-tls\n  rules:\n  - host: argocd.{{ traefik_ip }}.nip.io\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: argocd-server\n            port: \n              number: 80\n"
    dest: "{{ temp_argocd_ingress.path }}"

- name: Create Ingress for ArgoCD
  command: kubectl apply -f {{ temp_argocd_ingress.path }}
  register: ingress_result
  changed_when: "'created' in ingress_result.stdout or 'configured' in ingress_result.stdout"

- name: Remove temporary ArgoCD Ingress file
  file:
    path: "{{ temp_argocd_ingress.path }}"
    state: absent

- name: Update ArgoCD ConfigMap
  command: |
    kubectl patch configmap argocd-cmd-params-cm -n argocd --type merge -p '{"data":{"server.insecure":"false","server.rootpath":"/"}}'
  changed_when: false

- name: Restart ArgoCD server
  command: kubectl rollout restart deployment argocd-server -n argocd
  changed_when: false

- name: Wait for ArgoCD server to be ready
  command: kubectl -n argocd get deployment argocd-server -o jsonpath='{.status.readyReplicas}'
  register: argocd_ready
  until: argocd_ready.stdout | int == 1
  retries: 30
  delay: 10
  changed_when: false

- name: Display ArgoCD URL
  debug:
    msg: "ArgoCD is now available at https://argocd.{{ traefik_ip }}.nip.io"
